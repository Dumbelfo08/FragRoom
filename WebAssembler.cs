using System;
using System.Text;
using System.Reflection;

partial class Room{
	string htmlFile = "<!-- This file was generated by FragRoom @version-->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>@title</title>\n\t<link rel=\"icon\" type=\"image/@format\" href=\"data:image/@format;base64,@icon\">\n\t<style>\n\t\thtml, body {\n\t\t\tmargin: 0;\n\t\t\theight: 100%;\n\t\t\toverflow: hidden;\n\t\t\tfont-family: Arial, Helvetica, sans-serif;\n\t\t}\n\n\t\tcanvas {\n\t\t\tdisplay: block;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground-color: #000;\n\t\t}\n\n\t\t/* Modal styles */\n\t\t.modal {\n\t\t\tposition: fixed;\n\t\t\ttop: 50%;\n\t\t\tleft: 50%;\n\t\t\ttransform: translate(-50%, -50%);\n\t\t\tbackground-color: white;\n\t\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);\n\t\t\tborder-radius: 8px;\n\t\t\tz-index: 1000;\n\t\t\tdisplay: none;\n\t\t\tflex-direction: column;\n\t\t\tmax-width: 500px;\n\t\t\twidth: 80%;\n\t\t\tbackground-color: #111;\n\t\t\tpadding: 0px 10px 0px 10px;\n\t\t}\n\n\t\t.modal-header {\n\t\t\tcolor: white;\n\t\t\tpadding: 10px;\n\t\t\tborder-top-left-radius: 8px;\n\t\t\tborder-top-right-radius: 8px;\n\t\t\tfont-size: 32px;\n\t\t}\n\n\t\t.modal-content {\n\t\t\tpadding: 12px;\n\t\t\tfont-size: 16px;\n\t\t\tcolor: #CCC;\n\t\t\tbackground-color: #333;\n\t\t\tborder-radius: 8px;\n\t\t\tmax-height: 70vh;\n\t\t\toverflow-y: auto;\n\t\t}\n\n\t\t.modal-footer {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: flex-end;\n\t\t\tpadding: 10px;\n\t\t\tborder-bottom-left-radius: 8px;\n\t\t\tborder-bottom-right-radius: 8px;\n\t\t}\n\n\t\t.modal-footer button {\n\t\t\tpadding: 8px 12px;\n\t\t\tborder: none;\n\t\t\tborder-radius: 4px;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: 14px;\n\t\t\tbackground-color: #FF5347;\n\t\t\tcolor: white;\n\t\t}\n\n\t\t.modal-footer button:hover {\n\t\t\tbackground-color: #FF3C2B;\n\t\t}\n\n\t\t.modal-overlay {\n\t\t\tposition: fixed;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground-color: rgba(0, 0, 0, 0.5);\n\t\t\tz-index: 999;\n\t\t\tdisplay: none;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"modal-overlay\"></div>\n\t<div class=\"modal\">\n\t\t<div class=\"modal-header\">Error!</div>\n\t\t<div class=\"modal-content\"></div>\n\t\t<div class=\"modal-footer\">\n\t\t\t<button class=\"btn-ok\">Close</button>\n\t\t</div>\n\t</div>\n\t<canvas id=\"glCanvas\"></canvas>\n\t<script>\n@script\n\t</script>\n</body>\n</html>";
	
	private void assembleWeb(string fpath){
		if(!File.Exists(fpath)){
			showMessage("The file \"" + fpath + "\" couldn't be found");
			return;
		}
		filePath = fpath;
		
		string shaderCode = this.preprocess();
		
		try{
			mainShader = new Shader(vertexShader, shaderCode, null);
		} catch(Exception e){
			Console.WriteLine("Exception caught!");
			Console.WriteLine(e);
			showMessage("EXCEPTION caught:\n" + e);
			return;
		}
		
		mainShader.use();
		
		this.initializeUniforms();
		
		string htmlContent = htmlFile;
		
		htmlContent = htmlContent.Replace("@version", version);
		htmlContent = htmlContent.Replace("@title", this.Title);
		
		byte[] imageBytes;
		if(iconPath == null || !File.Exists(iconPath)){
			htmlContent = htmlContent.Replace("@format", "png");
			
			//Get the image bytes
			var assembly = Assembly.GetExecutingAssembly();
			
			string resourceName = assembly.GetManifestResourceNames()
			.Single(str => str.EndsWith("icon.png"));
			
			using (Stream stream = assembly.GetManifestResourceStream(resourceName))
			using (MemoryStream memoryStream = new MemoryStream())
			{
				stream.CopyTo(memoryStream);  // Copy the stream to memory
				imageBytes = memoryStream.ToArray();
			}
		}else{
			htmlContent = htmlContent.Replace("@format", Path.GetExtension(iconPath).Substring(1).ToLower());
			imageBytes = File.ReadAllBytes(iconPath);
		}
		htmlContent = htmlContent.Replace("@icon", Convert.ToBase64String(imageBytes));
		
		StringBuilder javaScript = new StringBuilder();
		
		javaScript.AppendLine("//This code was auto generated by FragRoom " + version);
		javaScript.AppendLine();
		
		//Modal
		javaScript.AppendLine("//Modal");
		javaScript.AppendLine("const modal = document.querySelector('.modal');\nconst modalOverlay = document.querySelector('.modal-overlay');\nconst modalContent = document.querySelector('.modal-content');\nconst okButton = document.querySelector('.btn-ok');\n\nfunction closeModal(){\n\tmodal.style.display = 'none';\n\tmodalOverlay.style.display = 'none';\n}\n\nokButton.addEventListener('click', closeModal);\n\nfunction showAlert(message){\n\tmodalContent.innerHTML = message.replace(/\\n/g, '<br>');\n\tmodal.style.display = 'flex';\n\tmodalOverlay.style.display = 'block';\n}");
		javaScript.AppendLine();
		
		//Consts
		if(secondsToClose != -1){
			javaScript.AppendLine("//Auto close");
			javaScript.Append("const secondsToClose = ");
			javaScript.Append(secondsToClose);
			javaScript.AppendLine(" * 1000;");
			javaScript.AppendLine();
		}
		
		//Shader source
		javaScript.AppendLine("//Shader source");
		javaScript.AppendLine("const fragmentShaderSource = `@shaderSource`;");	
		javaScript.Replace("@shaderSource", Translator.roomToWeb(File.ReadAllText(fpath)));
		javaScript.AppendLine();
		
		if(uniformTextures){
			javaScript.AppendLine("//Texture sources");
			javaScript.AppendLine("const textureSource = [");
			for(int i = 0; i < textures.Length; i++){
				if(textures[i] != null && File.Exists(textures[i].Substring(1))){
					javaScript.Append("\t`");
					javaScript.Append(textures[i][0]);
					javaScript.Append("data:image/");
					javaScript.Append(Path.GetExtension(textures[i].Substring(1)).Substring(1).ToLower());
					javaScript.Append(";base64,");
					javaScript.Append(Convert.ToBase64String(File.ReadAllBytes(textures[i].Substring(1))));
					javaScript.Append("`");
				}else{
					javaScript.Append("\tnull");
				}
				
				if(i != textures.Length - 1){
					javaScript.AppendLine(",");
				}else{
					javaScript.AppendLine();
				}
			}
			javaScript.AppendLine("];");
			javaScript.AppendLine();
			
			javaScript.AppendLine("//Texture functions");
			javaScript.AppendLine("function createTextureFromBase64(base64Data, gl, filter){\n\tconst texture = gl.createTexture();\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\n\tconst chosenFilter = (filter === 'N') ? gl.NEAREST : gl.LINEAR;\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, chosenFilter);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, chosenFilter);\n\n\treturn new Promise((resolve, reject) => {\n\t\tconst image = new Image();\n\t\t\n\t\timage.onload = function(){\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\t\t\tgl.generateMipmap(gl.TEXTURE_2D);\n\t\t\tresolve(texture);\n\t\t};\n\n\t\timage.onerror = function(){\n\t\t\treject(new Error('Error loading the texture image'));\n\t\t};\n\n\t\timage.src = base64Data;\n\t});\n}\n\nfunction numToUnit(num, gl){\n\tswitch(num){\n\t\tdefault:\n\t\tcase 0:\n\t\treturn gl.TEXTURE0;\n\t\tcase 1:\n\t\treturn gl.TEXTURE1;\n\t\tcase 2:\n\t\treturn gl.TEXTURE2;\n\t\tcase 3:\n\t\treturn gl.TEXTURE3;\n\t\tcase 4:\n\t\treturn gl.TEXTURE4;\n\t\tcase 5:\n\t\treturn gl.TEXTURE5;\n\t\tcase 6:\n\t\treturn gl.TEXTURE6;\n\t\tcase 7:\n\t\treturn gl.TEXTURE7;\n\t\tcase 8:\n\t\treturn gl.TEXTURE8;\n\t}\n}\n\nasync function loadTexture(program, gl, id){\n\tif(textureSource[id] != null){\n\t\tgl.activeTexture(numToUnit(id + 1, gl));\n\t\tconst t = await createTextureFromBase64(textureSource[id].substring(1), gl, textureSource[id][0]);\n\t\tgl.bindTexture(gl.TEXTURE_2D, t);\n\t\tgl.uniform1i(gl.getUniformLocation(program, 'iTexture[' + id + ']'), id + 1);\n\t}\n}");
			javaScript.AppendLine();
		}
		javaScript.AppendLine("//Shader source");
		javaScript.AppendLine("const vertexShaderSource = `#version 300 es\nin vec2 aPos;out vec2 fragCoord;void main(){gl_Position = vec4(aPos, 0.0, 1.0);fragCoord = gl_Position.xy;}`;");
		javaScript.AppendLine();
		
		if(uniformBackBuffer){
			javaScript.AppendLine("//Buffer shader source");
			javaScript.AppendLine("const bufferFragmentSource = `#version 300 es\nprecision highp float;out vec4 fragColor;in vec2 fragCoord;uniform sampler2D buffer;void main(){fragColor = texture(buffer, fragCoord / 2.0 + 0.5);}`;");
			javaScript.AppendLine();
			javaScript.AppendLine("//Buffer");
			javaScript.AppendLine("function createFramebuffer(gl, width, height){\n\tconst framebuffer = gl.createFramebuffer();\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n\tconst texture = gl.createTexture();\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n\tif (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE){\n\t\tshowAlert(\"Framebuffer is not complete.\");\n\t}\n\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\treturn {framebuffer, texture};\n}");
			javaScript.AppendLine();
		}
		
		//General stuff
		
		javaScript.AppendLine("//General functions");
		javaScript.AppendLine("function createShader(gl, type, source){\n\tconst shader = gl.createShader(type);\n\tgl.shaderSource(shader, source);\n\tgl.compileShader(shader);\n\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)){\n\t\tshowAlert('Shader compile failed with:\\n' + gl.getShaderInfoLog(shader));\n\t\tgl.deleteShader(shader);\n\t\treturn null;\n\t}\n\treturn shader;\n}\n\nfunction createProgram(gl, vertexShader, fragmentShader){\n\tconst program = gl.createProgram();\n\tgl.attachShader(program, vertexShader);\n\tgl.attachShader(program, fragmentShader);\n\tgl.linkProgram(program);\n\tif(!gl.getProgramParameter(program, gl.LINK_STATUS)){\n\t\tshowAlert('Program failed to link:\\n' + gl.getProgramInfoLog(program));\n\t\treturn null;\n\t}\n\treturn program;\n}\n\nfunction createMesh(gl, program){\n\tconst vertexBuffer = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\tconst vertices = new Float32Array([\n\t\t-1, -1,\n\t\t 1, -1,\n\t\t-1,  1,\n\t\t 1,  1,\n\t]);\n\tgl.bufferData(gl.ARRAY_BUFFER,vertices,gl.STATIC_DRAW);\n\tconst aPos = gl.getAttribLocation(program, 'aPos');\n\tgl.vertexAttribPointer(aPos, 2, gl.FLOAT, false, 0, 0);\n\tgl.enableVertexAttribArray(aPos);\n}");
		javaScript.AppendLine();
		
		javaScript.AppendLine("//Initialization");
		javaScript.AppendLine("function initializeWebGL(){\n\tconst canvas = document.getElementById('glCanvas');\n\tconst gl = canvas.getContext('webgl2');\n\tif(!gl){\n\t\talert('WebGL2 not supported');\n\t\treturn;\n\t}\n\n\tgl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n\tconst vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n\tconst fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\tconst program = createProgram(gl, vertexShader, fragmentShader);\n\n\tcreateMesh(gl, program);\n\tgl.useProgram(program);");
		javaScript.AppendLine();
		
		if(uniformMouse){
			javaScript.AppendLine("\t//Mouse");
			javaScript.AppendLine("\tlet mouseX = 0;\n\tlet mouseY = 0;\n\tcanvas.addEventListener('mousemove', function(event){\n\t\tconst rect = canvas.getBoundingClientRect();\n\t\tmouseX = event.clientX - rect.left;\n\t\tmouseY = event.clientY - rect.top;\n\t});");
			javaScript.AppendLine();
		}
		
		//initialize uniforms
		javaScript.AppendLine("\t//Uniforms");
		if(uniformTime){
			javaScript.AppendLine("\tconst iTime = gl.getUniformLocation(program, `iTime`);");
		}
		if(uniformFrame){
			javaScript.AppendLine("\tconst iFrame = gl.getUniformLocation(program, `iFrame`);");
		}
		if(uniformResolution){
			javaScript.AppendLine("\tconst iResolution = gl.getUniformLocation(program, `iResolution`);");
		}
		if(uniformHour){
			javaScript.AppendLine("\tconst iHour = gl.getUniformLocation(program, `iHour`);");
		}
		if(uniformDate){
			javaScript.AppendLine("\tconst iDate = gl.getUniformLocation(program, `iDate`);");
		}
		if(uniformFPS){
			javaScript.AppendLine("\tconst iFps = gl.getUniformLocation(program, `iFps`);");
		}
		if(uniformMouse){
			javaScript.AppendLine("\tconst iMouse = gl.getUniformLocation(program, `iMouse`);");
		}
		javaScript.AppendLine();
		
		if(uniformTextures){
			javaScript.AppendLine("\t//Textures");
			for(int i = 0; i < textures.Length; i++){
				if(textures[i] != null && File.Exists(textures[i].Substring(1))){
					javaScript.Append("\tloadTexture(program, gl, ");
					javaScript.Append(i);
					javaScript.AppendLine(");");
				}
			}
			javaScript.AppendLine();
		}
		
		//Uniforms and buffers
		if(uniformBackBuffer){
			javaScript.AppendLine("\t//Buffer");
			javaScript.AppendLine("\tconst iBackBuffer = gl.getUniformLocation(program, `iBackBuffer`);");
			
			javaScript.AppendLine("\tconst bufferVertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);");
			javaScript.AppendLine("\tconst bufferFragmentShader = createShader(gl, gl.FRAGMENT_SHADER, bufferFragmentSource);");
			javaScript.AppendLine("\tconst bufferProgram = createProgram(gl, bufferVertexShader, bufferFragmentShader);");
			javaScript.AppendLine();
			
			javaScript.AppendLine("\tgl.activeTexture(gl.TEXTURE0);");
			javaScript.AppendLine("\tconst {framebuffer: bufferA, texture: textureA} = createFramebuffer(gl, canvas.width, canvas.height);");
			javaScript.AppendLine("\tconst {framebuffer: bufferB, texture: textureB} = createFramebuffer(gl, canvas.width, canvas.height);");
			javaScript.AppendLine("\tgl.activeTexture(gl.TEXTURE0);");
			javaScript.AppendLine();
			
			javaScript.AppendLine("\tlet currentBuffer = false;");
			javaScript.AppendLine();
		}
		
		//resize
		javaScript.AppendLine("\t//Resize");
		if(uniformBackBuffer){
			javaScript.AppendLine("\tfunction resizeCanvas(){\n\t\tcanvas.width = window.innerWidth;\n\t\tcanvas.height = window.innerHeight;\n\t\tgl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\t\tgl.bindTexture(gl.TEXTURE_2D, textureA);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, textureB);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, canvas.width, canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\t\tif(currentBuffer){\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, textureB);\n\t\t}else{\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, textureA);\n\t\t}\n\t}");
		}else{
			javaScript.AppendLine("\tfunction resizeCanvas(){\n\t\tcanvas.width = window.innerWidth;\n\t\tcanvas.height = window.innerHeight;\n\t\tgl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\t}");
		}
		javaScript.AppendLine("\twindow.addEventListener('resize', resizeCanvas);\n\tresizeCanvas();");
		javaScript.AppendLine();
		
		//FPS
		javaScript.AppendLine("\t//Fps");
		javaScript.Append("\tconst frameDuration = 1000 / ");
		javaScript.Append(maxFps);
		javaScript.AppendLine(";");
		javaScript.AppendLine();
		
		//Uniforms
		javaScript.AppendLine("\t//Uniforms");
		if(uniformTime){
			javaScript.AppendLine("\tlet startTime = performance.now();");
		}
		if(uniformFrame){
			javaScript.AppendLine("\tlet frameCounter = 0;");
		}
		if(uniformFPS){
			javaScript.AppendLine("\tlet lastTime = performance.now();");
		}
		javaScript.AppendLine();
		
		javaScript.AppendLine("\t//Auto close");
		if(secondsToClose != -1){
			javaScript.AppendLine("const startTimeSecs = performance.now();");
		}
		javaScript.AppendLine();
		
		//Render
		javaScript.AppendLine("\t//Render");
		javaScript.AppendLine("\tfunction render(){");
		javaScript.AppendLine("\t\tconst currentTime = performance.now();");
		
		if(secondsToClose != -1){
			javaScript.AppendLine("\t\t//Auto close");
			javaScript.AppendLine("\t\tif(currentTime > startTimeSecs + secondsToClose){\n\t\t\twindow.close();\n\t\t}");
			javaScript.AppendLine();
		}
		
		
		if(uniformBackBuffer){
			javaScript.AppendLine("\t\t//Buffer");
			javaScript.AppendLine("\t\tif(currentBuffer){\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, bufferA);\n\t\t}else{\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, bufferB);\n\t\t}\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tgl.useProgram(program);");
			javaScript.AppendLine();
		}
		
		javaScript.AppendLine("\t\t//Uniforms");
		if(uniformTime){
			javaScript.AppendLine("\t\tgl.uniform1f(iTime, (currentTime - startTime) / 1000.0);");
		}
		if(uniformFrame){
			javaScript.AppendLine("\t\tgl.uniform1i(iFrame, frameCounter);");
		}
		if(uniformResolution){
			javaScript.AppendLine("\t\tgl.uniform2f(iResolution, canvas.width, canvas.height);");
		}
		if(uniformHour){
			javaScript.AppendLine("\t\tconst dateHour = new Date();");
			javaScript.AppendLine("\t\tgl.uniform3f(iHour, dateHour.getHours(), dateHour.getMinutes(), dateHour.getSeconds());");
		}
		if(uniformDate){
			javaScript.AppendLine("\t\tconst dateDate = new Date();");
			javaScript.AppendLine("\t\tgl.uniform3f(iDate, dateDate.getDate(), dateDate.getMonth() + 1, dateDate.getFullYear());");
		}
		if(uniformFPS){
			javaScript.AppendLine("\t\tconst deltaTime = (currentTime - lastTime) / 1000;");
			javaScript.AppendLine("\t\tlastTime = currentTime;");
			javaScript.AppendLine("\t\tgl.uniform1f(iFps, 1 / deltaTime);");
		}
		if(uniformMouse){
			javaScript.AppendLine("\t\tgl.uniform2f(iMouse, (mouseX / canvas.width) * 2 - 1, -((mouseY / canvas.height) * 2 - 1));");
		}
		javaScript.AppendLine();
		
		javaScript.AppendLine("\t\t//Rendering");
		javaScript.AppendLine("\t\tgl.clear(gl.COLOR_BUFFER_BIT);");
		javaScript.AppendLine("\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);");
		javaScript.AppendLine();
		
		if(uniformBackBuffer){
			javaScript.AppendLine("\t\t//Buffer");
			javaScript.AppendLine("\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\tgl.useProgram(bufferProgram);\n\t\tif(currentBuffer){\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, textureA);\n\t\t}else{\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, textureB);\n\t\t}\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\tcurrentBuffer = !currentBuffer;");
			javaScript.AppendLine();
		}
		
		javaScript.AppendLine("\t\t//Fps");
		javaScript.AppendLine("\t\tconst delay = Math.max(0, frameDuration - (performance.now() - currentTime));");
		javaScript.AppendLine("\t\tsetTimeout(() => {requestAnimationFrame(render);}, delay);");
		
		
		javaScript.AppendLine("\t}");
		javaScript.AppendLine("\trender();");
		javaScript.AppendLine("}");
		javaScript.AppendLine("initializeWebGL();");
		
		
		
		htmlContent = htmlContent.Replace("@script", javaScript.ToString());
		
		Uri uri = new Uri(Path.GetFullPath(fpath));
		
		File.WriteAllText(Path.GetFileNameWithoutExtension(uri.LocalPath) + ".html", htmlContent);
	}
}